// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.4
// source: ipam.proto

package proto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpServiceClient is the client API for IpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpServiceClient interface {
	Allocate(ctx context.Context, in *IPAMRequest, opts ...grpc.CallOption) (*IPAMResponse, error)
	Release(ctx context.Context, in *IPAMRequest, opts ...grpc.CallOption) (*IPAMResponse, error)
}

type ipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpServiceClient(cc grpc.ClientConnInterface) IpServiceClient {
	return &ipServiceClient{cc}
}

func (c *ipServiceClient) Allocate(ctx context.Context, in *IPAMRequest, opts ...grpc.CallOption) (*IPAMResponse, error) {
	out := new(IPAMResponse)
	err := c.cc.Invoke(ctx, "/v1.ipService/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) Release(ctx context.Context, in *IPAMRequest, opts ...grpc.CallOption) (*IPAMResponse, error) {
	out := new(IPAMResponse)
	err := c.cc.Invoke(ctx, "/v1.ipService/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpServiceServer is the server API for IpService service.
// All implementations must embed UnimplementedIpServiceServer
// for forward compatibility
type IpServiceServer interface {
	Allocate(context.Context, *IPAMRequest) (*IPAMResponse, error)
	Release(context.Context, *IPAMRequest) (*IPAMResponse, error)
	mustEmbedUnimplementedIpServiceServer()
}

// UnimplementedIpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIpServiceServer struct {
}

func (UnimplementedIpServiceServer) Allocate(context.Context, *IPAMRequest) (*IPAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedIpServiceServer) Release(context.Context, *IPAMRequest) (*IPAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedIpServiceServer) mustEmbedUnimplementedIpServiceServer() {}

// UnsafeIpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpServiceServer will
// result in compilation errors.
type UnsafeIpServiceServer interface {
	mustEmbedUnimplementedIpServiceServer()
}

func RegisterIpServiceServer(s grpc.ServiceRegistrar, srv IpServiceServer) {
	s.RegisterService(&IpService_ServiceDesc, srv)
}

func _IpService_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ipService/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).Allocate(ctx, req.(*IPAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ipService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).Release(ctx, req.(*IPAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpService_ServiceDesc is the grpc.ServiceDesc for IpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ipService",
	HandlerType: (*IpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _IpService_Allocate_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _IpService_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipam.proto",
}
