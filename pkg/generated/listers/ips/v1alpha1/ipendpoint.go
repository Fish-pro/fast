/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/fast-io/fast/pkg/apis/ips/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpEndpointLister helps list IpEndpoints.
// All objects returned here must be treated as read-only.
type IpEndpointLister interface {
	// List lists all IpEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpEndpoint, err error)
	// IpEndpoints returns an object that can list and get IpEndpoints.
	IpEndpoints(namespace string) IpEndpointNamespaceLister
	IpEndpointListerExpansion
}

// ipEndpointLister implements the IpEndpointLister interface.
type ipEndpointLister struct {
	indexer cache.Indexer
}

// NewIpEndpointLister returns a new IpEndpointLister.
func NewIpEndpointLister(indexer cache.Indexer) IpEndpointLister {
	return &ipEndpointLister{indexer: indexer}
}

// List lists all IpEndpoints in the indexer.
func (s *ipEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.IpEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpEndpoint))
	})
	return ret, err
}

// IpEndpoints returns an object that can list and get IpEndpoints.
func (s *ipEndpointLister) IpEndpoints(namespace string) IpEndpointNamespaceLister {
	return ipEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpEndpointNamespaceLister helps list and get IpEndpoints.
// All objects returned here must be treated as read-only.
type IpEndpointNamespaceLister interface {
	// List lists all IpEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpEndpoint, err error)
	// Get retrieves the IpEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpEndpoint, error)
	IpEndpointNamespaceListerExpansion
}

// ipEndpointNamespaceLister implements the IpEndpointNamespaceLister
// interface.
type ipEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpEndpoints in the indexer for a given namespace.
func (s ipEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpEndpoint))
	})
	return ret, err
}

// Get retrieves the IpEndpoint from the indexer for a given namespace and name.
func (s ipEndpointNamespaceLister) Get(name string) (*v1alpha1.IpEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipendpoint"), name)
	}
	return obj.(*v1alpha1.IpEndpoint), nil
}
